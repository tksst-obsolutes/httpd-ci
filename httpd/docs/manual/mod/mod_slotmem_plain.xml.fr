<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.fr.xsl"?>
<!-- English Revision : 1422580 -->
<!-- French translation : Lucien GENTIS -->
<!-- Reviewed by : Vincent Deffontaines -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_slotmem_plain.xml.meta">

<name>mod_slotmem_plain</name>
<description>Fournisseur de m&eacute;moire partag&eacute;e &agrave; base de
slots.</description>
<status>Extension</status>
<sourcefile>mod_slotmem_plain.c</sourcefile>
<identifier>slotmem_plain_module</identifier>

<summary>
    <p><code>mod_slotmem_plain</code> est un fournisseur de m&eacute;moire qui
    permet la cr&eacute;ation et l'utilisation d'un segment de m&eacute;moire contigu
    dans lequel les ensembles de donn&eacute;es sont organis&eacute;s en "slots".
    </p>

    <p>Si la m&eacute;moire doit &ecirc;tre partag&eacute;e entre des threads et des
    processus, il est pr&eacute;f&eacute;rable d'utiliser le fournisseur
    <module>mod_slotmem_shm</module>.
    </p>

    <p><code>mod_slotmem_plain</code> fournit une API comprenant les
    fonctions suivantes :
    </p>

    <dl>
      <dt>apr_status_t doall(ap_slotmem_instance_t *s, ap_slotmem_callback_fn_t *func, void *data, apr_pool_t *pool)</dt>
      <dd>appelle le callback sur tous les slots actifs</dd>

      <dt>apr_status_t create(ap_slotmem_instance_t **new, const char *name, apr_size_t item_size, unsigned int item_num, ap_slotmem_type_t type, apr_pool_t *pool)</dt>
      <dd>cr&eacute;e un nouveau slot de m&eacute;moire dont chaque objet aura une
      taille de item_size.</dd>

      <dt>apr_status_t attach(ap_slotmem_instance_t **new, const char *name, apr_size_t *item_size, unsigned int *item_num, apr_pool_t *pool)</dt>
      <dd>rattache &agrave; un slot de m&eacute;moire existant.</dd>

      <dt>apr_status_t dptr(ap_slotmem_instance_t *s, unsigned int item_id, void**mem)</dt>
      <dd>indique la m&eacute;moire associ&eacute;e &agrave; ce slot actif.</dd>

      <dt>apr_status_t get(ap_slotmem_instance_t *s, unsigned int item_id, unsigned char *dest, apr_size_t dest_len)</dt>
      <dd>lit la m&eacute;moire depuis ce slot et la transf&egrave;re vers dest</dd>

      <dt>apr_status_t put(ap_slotmem_instance_t *slot, unsigned int item_id, unsigned char *src, apr_size_t src_len)</dt>
      <dd>&eacute;crit dans ce slot la m&eacute;moire en provenance de src</dd>

      <dt>unsigned int num_slots(ap_slotmem_instance_t *s)</dt>
      <dd>renvoie le nombre total de slots contenus dans ce segment</dd>

      <dt>apr_size_t slot_size(ap_slotmem_instance_t *s)</dt>
      <dd>renvoie la taille totale des donn&eacute;es, en octets, contenues
      dans un slot de ce segment</dd>

      <dt>apr_status_t grab(ap_slotmem_instance_t *s, unsigned int *item_id);</dt>
      <dd>alloue le premier slot disponible et le marque comme utilis&eacute; (n'effectue aucune
      copie de donn&eacute;es)</dd>

      <dt>apr_status_t fgrab(ap_slotmem_instance_t *s, unsigned int item_id);</dt>
      <dd>force l'allocation ou l'appropriation du slot sp&eacute;cifi&eacute; et le marque comme utilis&eacute; (n'effectue aucune
      copie de donn&eacute;es)</dd>

      <dt>apr_status_t release(ap_slotmem_instance_t *s, unsigned int item_id);</dt>
      <dd>lib&egrave;re un slot et le marque comme non utilis&eacute; (n'effectue aucune
      copie de donn&eacute;es)</dd>
    </dl>

</summary>

</modulesynopsis>
